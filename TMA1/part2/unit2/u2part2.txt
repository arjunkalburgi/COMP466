JavaScript: Functions<br>

<br>
 To develop and maintain a large program construct it from small, simple pieces divide and conquer<br>

<br>
 You’ll combine new functions that you writewith prepackaged functions and objectsavailable in JavaScript<br>
 The prepackaged functions that belong toJavaScript objects (such as Math.pow,introduced previously) are called methods.<br>
 JavaScript provides several objects that havea rich collection of methods for performingcommon mathematical calculations, stringmanipulations, date and timemanipulations, and manipulations ofcollections of data called arrays.<br>

<br>
 You can define programmer-defined functions thatperform specific tasks and use them at manypoints in a script The actual statements defining the function are written only onceand are hidden from other functions<br>
 Functions are invoked by writing the name of thefunction, followed by a left parenthesis, followedby a comma-separated list of zero or morearguments, followed by a right parenthesis<br>
 Methods are called in the same way as functions,but require the name of the object to which themethod belongs and a dot preceding the methodname<br>
 Function (and method) arguments may beconstants, variables or expressions<br>

<br>
 return statement passes information from inside a function back to the point in theprogram where it was called<br>
 A function must be called explicitly for the code inits body to execute<br>
 The format of a function definition is function function-name( parameter-list ) { declarations and statements }<br>

<br>
 Three ways to return control to the point atwhich a function was invoked Reaching the function-ending right brace Executing the statement return; Executing the statement “return expression;” toreturn the value of expression to the caller<br>
 When a return statement executes, controlreturns immediately to the point at which thefunction was invoked<br>

<br>
 The script in our next example (Fig. 9.3) usesa programmer-defined function calledmaximum to determine and return the largestof three floating-point values.<br>

<br>
 All variables declared with the keyword var infunction definitions are local variables—this meansthat they can be accessed only in the function inwhich they’re defined.<br>
 A function’s parameters are also considered to belocal variables.<br>
 There are several reasons for modularizing aprogram with functions. Divide-and-conquer approach makes programdevelopment more manageable. Software reusability. Avoid repeating code in a program.<br>

<br>
 random method generates a floating-point valuefrom 0.0 up to, but not including, 1.0<br>
 Random integers in a certain range can begenerated by scaling and shifting the valuesreturned by random, then using Math.floor toconvert them to integers The scaling factor determines the size of the range (i.e. a scalingfactor of 4 means four possible integers) The shift number is added to the result to determine where therange begins (i.e. shifting the numbers by 3 would give numbersbetween 3 and 7)<br>
 Method Math.floor rounds its argument downto the closest integer<br>

<br>
 In the next example, we build a random imagegenerator—a script that displays four randomlyselected die images every time the user clicks aRoll Dice button on the page.<br>
 For the script in Fig. 9.5 to function properly,the directory containing the fileRollDice.html must also contain the six dieimages—these are included with this chapter’sexamples.<br>

User Interactions Via Event Handling<br>
 Until now, all user interactions with scripts have been through a prompt dialog or an alert dialog.<br>
 These dialogs are valid ways to receive input from a user andto display messages, but they’re fairly limited in theircapabilities.<br>
 A prompt dialog can obtain only one value at a time from theuser, and a message dialog can display only one message.<br>
 Inputs are typically received from the user via an HTML5form.<br>
 Outputs are typically displayed to the user in the web page.<br>
 This program uses an HTML5 form and a new graphical userinterface concept—GUI event handling.<br>
 The JavaScript executes in response to the user’s interactionwith an element in a form. This interaction causes an event.<br>
 Scripts are often used to respond to user initiated events.<br>

The body Element<br>
 The elements in the body are used extensivelyin the script.The form Element<br>
 The HTML5 standard requires that every formcontain an action attribute, but because thisform does not post its information to a webserver, the string "#" is used simply to allowthis document to validate.<br>
 The # symbol by itself represents the currentpage.<br>

The button input Element and Event-DrivenProgramming<br>
 Event-driven programming<br>
 the user interacts with an element in the web page, thescript is notified of the event and the script processes theevent.<br>
 The user’s interaction with the GUI “drives” theprogram.<br>
 The button click is known as the event.<br>
 The function that’s called when an event occurs isknown as an event handler.<br>
 When a GUI event occurs in a form, the browsercalls the specified event-handling function.<br>
 Before any event can be processed, each elementmust know which event-handling function will becalled when a particular event occurs.<br>

The img Elements<br>
 The four img elements will display the four randomlyselected dice.<br>
 Their id attributes (die1, die2, die3 and die4,respectively) can be used to apply CSS styles and toenable script code to refer to these element in theHTML5 document.<br>
 Because the id attribute, if specified, must have aunique value among all id attributes in the page, JavaScriptcan reliably refer to any single element via its idattribute.<br>
 Each img element displays the image blank.png (anempty white image) when the page first renders.<br>

Specifying a Function to Call When the Browser FinishesLoading a Document<br>
 Many examples will execute a JavaScript function whenthe document finishes loading.<br>
 This is accomplished by handling the window object’sload event.<br>
 To specify the function to call when an event occurs,you registering an event handler for that event.<br>
 Method addEventListener is available for every DOMnode. The method takes three arguments:<br>
 the first is the name of the event for which we’re registering ahandler<br>
 the second is the function that will be called to handle theevent<br>
 the last argument is typically false—the true value is beyondthis book’s scope<br>

<br>
 To show that the random values representing the diceoccur with approximately equal likelihood, let’s allowthe user to roll 12 dice at a time and keep statisticsshowing the number of times each face occurs and thepercentage of the time each face is rolled (Fig. 9.6).<br>

Generalized Scaling and Shifting of Random Values<br>
 The values returned by random are always in the range 0.0 £ Math.random() < 1.0<br>
 Previously, we demonstrated the statement face = Math.floor( 1 + Math.random() * 6 );<br>
 which simulates the rolling of a six-sided die. This statementalways assigns an integer (at random) to variable face, in therange 1 £ face £ 6.<br>
 Referring to the preceding statement, we see that the widthof the range is determined by the number used to scalerandom with the multiplication operator (6 in the precedingstatement) and that the starting number of the range is equalto the number (1 in the preceding statement) added toMath.random() * 6.<br>

<br>
 We can generalize this result as face = Math.floor( a + Math.random() * b );<br>
 where a is the shifting value (which is equal to the firstnumber in the desired range of consecutive integers)and b is the scaling factor (which is equal to the widthof the desired range of consecutive integers).<br>

<br>
 The script in Fig. 9.7 simulates the game of craps.<br>

The HTML5 audio Element<br>
 An HTML5 audio element is used to embedaudio into a web page.<br>
 We specify an id for the element, so that wecan programmatically control when the audioclip plays, based on the user’s interactionswith the game.<br>
 Setting the preload attribute to "auto"indicates to the browser that it shouldconsider downloading the audio clip so thatit’s ready to be played when the game needsit.<br>

<br>
 Most browsers support MP3, OGG and/or WAVformat.<br>
 Each source element specifies a src and a typeattribute. The src attribute specifies the location of the audio clip. The type attribute specifies the clip’s MIME type—audio/mpeg for the MP3 clip and audio/ogg for the OGGclip (WAV would be audio/x-wav; MIME types for these andother formats can be found online).<br>
 When a web browser that supports the audioelement encounters the source elements, it willchose the first audio source that represents one ofthe browser’s supported formats.<br>

CrapsRules.html and the HMTL5 video Element<br>
 When the user clicks the hyperlink in Craps.html,the CrapsRules.html is displayed in the browser.<br>
 This page consists of a link back to Craps.html(Fig. 9.8) and an HTML5 video element thatdisplays a video explaining the basic rules for thegame of Craps.<br>

<br>
 Each identifier in a program has a scope<br>
 The scope of an identifier for a variable orfunction is the portion of the program inwhich the identifier can be referenced<br>
 Global variables or script-level variables areaccessible in any part of a script and are saidto have global scope Thus every function in the script can potentially usethe variables<br>

<br>
 Identifiers declared inside a function havefunction (or local) scope and can be usedonly in that function<br>
 Function scope begins with the opening leftbrace ({) of the function in which theidentifier is declared and ends at theterminating right brace (})<br>
 Local variables of a function and functionparameters have function scope<br>
 If a local variable in a function has the samename as a global variable, the globalvariable is “hidden” from the body of thefunction.<br>

<br>
 JavaScript provides nine global functions aspart of a Global object<br>
 This object contains all the global variables in the script all the user-defined functions in the script all the built-in global functions listed in thefollowing slide<br>
 You do not need to use the Global objectdirectly; JavaScript uses it for you<br>

<br>
 A recursive function calls itself, either directly, orindirectly through another function.<br>
 A recursive function knows how to solve only thesimplest case, or base case If the function is called with a base case, it returns a result If the function is called with a more complex problem, it dividesthe problem into two conceptual pieces—a piece that the functionknows how to process (the base case) and a simpler or smallerversion of the original problem.<br>
 The function invokes (calls) a fresh copy of itself togo to work on the smaller problem; this invocationis referred to as a recursive call, or the recursionstep.<br>

<br>
 The recursion step executes while the original callto the function is still open (i.e., it has not finishedexecuting)<br>
 For recursion eventually to terminate, each time thefunction calls itself with a simpler version of theoriginal problem, the sequence of smaller andsmaller problems must converge on the base case At that point, the function recognizes the base case, returns aresult to the previous copy of the function, and a sequence ofreturns ensues up the line until the original function calleventually returns the final result to the caller<br>

<br>
 Both iteration and recursion involve repetition Iteration explicitly uses a repetition statement Recursion achieves repetition through repeatedfunction calls<br>
 Iteration and recursion each involve atermination test Iteration terminates when the loop-continuationcondition fails Recursion terminates when a base case isrecognized<br>

<br>
 Iteration both with counter-controlled repetitionand recursion gradually approach termination Iteration keeps modifying a counter until the counter assumes avalue that makes the loop-continuation condition fail Recursion keeps producing simpler versions of the originalproblem until the base case is reached<br>
 Both iteration and recursion can occur infinitely: An infinite loop occurs with iteration if the loopcontinuationtest never becomes false; infinite recursion occurs if the recursion step does notreduce the problem each time via a sequence thatconverges on the base case or if the base case is incorrect.<br>

